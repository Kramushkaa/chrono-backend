import { Telegraf } from 'telegraf';
import { logger } from '../utils/logger';

export class TelegramService {
  private bot: Telegraf | null = null;
  private adminChatId: string;
  private isEnabled: boolean = false;

  constructor(botToken?: string, adminChatId?: string) {
    this.adminChatId = adminChatId || '';

    if (botToken && adminChatId) {
      try {
        this.bot = new Telegraf(botToken);
        this.isEnabled = true;
        logger.info('Telegram notifications service initialized (Telegraf)');
      } catch (error) {
        logger.error('Telegram service initialization failed', {
          error: error instanceof Error ? error : new Error(String(error)),
        });
        this.isEnabled = false;
      }
    } else {
      logger.warn('Telegram notifications disabled: missing token or chat ID');
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async notifyNewRegistration(
    userEmail: string,
    username?: string,
    fullName?: string
  ): Promise<void> {
    if (!this.isEnabled || !this.bot) return;

    const _displayName = fullName || username || userEmail;
    const usernameText = username ? `\nüë§ Username: ${username}` : '';
    const fullNameText = fullName ? `\nüìù –ò–º—è: ${fullName}` : '';

    const message = `
üéâ <b>–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!</b>

üìß Email: ${userEmail}${usernameText}${fullNameText}

‚è∞ ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}
`.trim();

    try {
      await this.bot.telegram.sendMessage(this.adminChatId, message, { parse_mode: 'HTML' });
      logger.info('Telegram notification sent: new registration', { userEmail });
    } catch (error) {
      logger.error('Failed to send Telegram notification (registration)', {
        error: error instanceof Error ? error : new Error(String(error)),
        userEmail,
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
   */
  async notifyVerificationEmailSent(userEmail: string, isResend: boolean = false): Promise<void> {
    if (!this.isEnabled || !this.bot) return;

    const action = isResend ? '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞' : '–û—Ç–ø—Ä–∞–≤–∫–∞';
    const emoji = isResend ? 'üîÑ' : 'üì®';

    const message = `
${emoji} <b>${action} –ø–∏—Å—å–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>

üìß Email: ${userEmail}

‚è∞ ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}
`.trim();

    try {
      await this.bot.telegram.sendMessage(this.adminChatId, message, { parse_mode: 'HTML' });
      logger.info('Telegram notification sent: verification email', { userEmail, isResend });
    } catch (error) {
      logger.error('Failed to send Telegram notification (verification email)', {
        error: error instanceof Error ? error : new Error(String(error)),
        userEmail,
        isResend,
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ email
   */
  async notifyEmailVerified(userEmail: string, username?: string): Promise<void> {
    if (!this.isEnabled || !this.bot) return;

    const _displayName = username || userEmail;
    const usernameText = username ? `\nüë§ Username: ${username}` : '';

    const message = `
‚úÖ <b>Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!</b>

üìß Email: ${userEmail}${usernameText}

‚è∞ ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}
`.trim();

    try {
      await this.bot.telegram.sendMessage(this.adminChatId, message, { parse_mode: 'HTML' });
      logger.info('Telegram notification sent: email verified', { userEmail, username });
    } catch (error) {
      logger.error('Failed to send Telegram notification (email verified)', {
        error: error instanceof Error ? error : new Error(String(error)),
        userEmail,
        username,
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏
   */
  async notifyPersonCreated(
    personName: string,
    creatorEmail: string,
    status: 'pending' | 'approved',
    personId: string
  ): Promise<void> {
    if (!this.isEnabled || !this.bot) return;

    const emoji = status === 'approved' ? '‚úÖ' : '‚è≥';
    const statusText = status === 'approved' ? '—Å–æ–∑–¥–∞–Ω–∞ –∏ –æ–¥–æ–±—Ä–µ–Ω–∞' : '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é';

    const message = `
${emoji} <b>–ù–æ–≤–∞—è –ª–∏—á–Ω–æ—Å—Ç—å ${statusText}</b>

üë§ –ò–º—è: ${personName}
üìß –ê–≤—Ç–æ—Ä: ${creatorEmail}
üÜî ID: ${personId}

‚è∞ ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}
`.trim();

    try {
      await this.bot.telegram.sendMessage(this.adminChatId, message, { parse_mode: 'HTML' });
      logger.info('Telegram notification sent: person created', {
        personName,
        creatorEmail,
        status,
        personId,
      });
    } catch (error) {
      logger.error('Failed to send Telegram notification (person created)', {
        error: error instanceof Error ? error : new Error(String(error)),
        personName,
        creatorEmail,
        status,
        personId,
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–∏—á–Ω–æ—Å—Ç–∏
   */
  async notifyPersonEditProposed(
    personName: string,
    proposerEmail: string,
    personId: string
  ): Promise<void> {
    if (!this.isEnabled || !this.bot) return;

    const message = `
‚úèÔ∏è <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ª–∏—á–Ω–æ—Å—Ç–∏</b>

üë§ –õ–∏—á–Ω–æ—Å—Ç—å: ${personName}
üìß –ê–≤—Ç–æ—Ä –ø—Ä–∞–≤–æ–∫: ${proposerEmail}
üÜî ID: ${personId}

‚è∞ ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}
`.trim();

    try {
      await this.bot.telegram.sendMessage(this.adminChatId, message, { parse_mode: 'HTML' });
      logger.info('Telegram notification sent: person edit proposed', {
        personName,
        proposerEmail,
        personId,
      });
    } catch (error) {
      logger.error('Failed to send Telegram notification (person edit)', {
        error: error instanceof Error ? error : new Error(String(error)),
        personName,
        proposerEmail,
        personId,
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—à–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ –ª–∏—á–Ω–æ—Å—Ç–∏
   */
  async notifyPersonReviewed(
    personName: string,
    action: 'approve' | 'reject',
    reviewerEmail: string,
    personId: string
  ): Promise<void> {
    if (!this.isEnabled || !this.bot) return;

    const emoji = action === 'approve' ? '‚úÖ' : '‚ùå';
    const actionText = action === 'approve' ? '–æ–¥–æ–±—Ä–µ–Ω–∞' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞';

    const message = `
${emoji} <b>–õ–∏—á–Ω–æ—Å—Ç—å ${actionText}</b>

üë§ –ò–º—è: ${personName}
üë®‚Äç‚öñÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: ${reviewerEmail}
üÜî ID: ${personId}

‚è∞ ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}
`.trim();

    try {
      await this.bot.telegram.sendMessage(this.adminChatId, message, { parse_mode: 'HTML' });
      logger.info('Telegram notification sent: person reviewed', {
        personName,
        action,
        reviewerEmail,
        personId,
      });
    } catch (error) {
      logger.error('Failed to send Telegram notification (person reviewed)', {
        error: error instanceof Error ? error : new Error(String(error)),
        personName,
        action,
        reviewerEmail,
        personId,
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   */
  async notifyAchievementCreated(
    description: string,
    year: number,
    creatorEmail: string,
    status: 'pending' | 'approved',
    personName?: string,
    countryName?: string
  ): Promise<void> {
    if (!this.isEnabled || !this.bot) return;

    const emoji = status === 'approved' ? '‚úÖ' : '‚è≥';
    const statusText = status === 'approved' ? '—Å–æ–∑–¥–∞–Ω–æ –∏ –æ–¥–æ–±—Ä–µ–Ω–æ' : '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é';
    const contextLine = personName
      ? `\nüë§ –õ–∏—á–Ω–æ—Å—Ç—å: ${personName}`
      : countryName
        ? `\nüåç –°—Ç—Ä–∞–Ω–∞: ${countryName}`
        : '';

    const message = `
${emoji} <b>–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ${statusText}</b>

üìÖ –ì–æ–¥: ${year}
üìù ${description.substring(0, 100)}${description.length > 100 ? '...' : ''}${contextLine}
üìß –ê–≤—Ç–æ—Ä: ${creatorEmail}

‚è∞ ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}
`.trim();

    try {
      await this.bot.telegram.sendMessage(this.adminChatId, message, { parse_mode: 'HTML' });
      logger.info('Telegram notification sent: achievement created', {
        description,
        year,
        creatorEmail,
        status,
        personName,
        countryName,
      });
    } catch (error) {
      logger.error('Failed to send Telegram notification (achievement created)', {
        error: error instanceof Error ? error : new Error(String(error)),
        description,
        year,
        creatorEmail,
        status,
        personName,
        countryName,
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—à–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é
   */
  async notifyAchievementReviewed(
    description: string,
    year: number,
    action: 'approve' | 'reject',
    reviewerEmail: string
  ): Promise<void> {
    if (!this.isEnabled || !this.bot) return;

    const emoji = action === 'approve' ? '‚úÖ' : '‚ùå';
    const actionText = action === 'approve' ? '–æ–¥–æ–±—Ä–µ–Ω–æ' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ';

    const message = `
${emoji} <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ${actionText}</b>

üìÖ –ì–æ–¥: ${year}
üìù ${description.substring(0, 100)}${description.length > 100 ? '...' : ''}
üë®‚Äç‚öñÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: ${reviewerEmail}

‚è∞ ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}
`.trim();

    try {
      await this.bot.telegram.sendMessage(this.adminChatId, message, { parse_mode: 'HTML' });
      logger.info('Telegram notification sent: achievement reviewed', {
        description,
        year,
        action,
        reviewerEmail,
      });
    } catch (error) {
      logger.error('Failed to send Telegram notification (achievement reviewed)', {
        error: error instanceof Error ? error : new Error(String(error)),
        description,
        year,
        action,
        reviewerEmail,
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞
   */
  async notifyPeriodCreated(
    periodType: string,
    startYear: number,
    endYear: number,
    creatorEmail: string,
    status: 'pending' | 'approved',
    personName?: string
  ): Promise<void> {
    if (!this.isEnabled || !this.bot) return;

    const emoji = status === 'approved' ? '‚úÖ' : '‚è≥';
    const statusText = status === 'approved' ? '—Å–æ–∑–¥–∞–Ω –∏ –æ–¥–æ–±—Ä–µ–Ω' : '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é';
    const personLine = personName ? `\nüë§ –õ–∏—á–Ω–æ—Å—Ç—å: ${personName}` : '';

    const message = `
${emoji} <b>–ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ ${statusText}</b>

üìä –¢–∏–ø: ${periodType}
üìÖ –ì–æ–¥—ã: ${startYear}‚Äì${endYear}${personLine}
üìß –ê–≤—Ç–æ—Ä: ${creatorEmail}

‚è∞ ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}
`.trim();

    try {
      await this.bot.telegram.sendMessage(this.adminChatId, message, { parse_mode: 'HTML' });
      logger.info('Telegram notification sent: period created', {
        periodType,
        startYear,
        endYear,
        creatorEmail,
        status,
        personName,
      });
    } catch (error) {
      logger.error('Failed to send Telegram notification (period created)', {
        error: error instanceof Error ? error : new Error(String(error)),
        periodType,
        startYear,
        endYear,
        creatorEmail,
        status,
        personName,
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—à–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ –ø–µ—Ä–∏–æ–¥—É
   */
  async notifyPeriodReviewed(
    periodType: string,
    startYear: number,
    endYear: number,
    action: 'approve' | 'reject',
    reviewerEmail: string
  ): Promise<void> {
    if (!this.isEnabled || !this.bot) return;

    const emoji = action === 'approve' ? '‚úÖ' : '‚ùå';
    const actionText = action === 'approve' ? '–æ–¥–æ–±—Ä–µ–Ω' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω';

    const message = `
${emoji} <b>–ü–µ—Ä–∏–æ–¥ ${actionText}</b>

üìä –¢–∏–ø: ${periodType}
üìÖ –ì–æ–¥—ã: ${startYear}‚Äì${endYear}
üë®‚Äç‚öñÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: ${reviewerEmail}

‚è∞ ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}
`.trim();

    try {
      await this.bot.telegram.sendMessage(this.adminChatId, message, { parse_mode: 'HTML' });
      logger.info('Telegram notification sent: period reviewed', {
        periodType,
        startYear,
        endYear,
        action,
        reviewerEmail,
      });
    } catch (error) {
      logger.error('Failed to send Telegram notification (period reviewed)', {
        error: error instanceof Error ? error : new Error(String(error)),
        periodType,
        startYear,
        endYear,
        action,
        reviewerEmail,
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async sendTestMessage(): Promise<void> {
    if (!this.isEnabled || !this.bot) {
      logger.warn('Telegram service is not enabled');
      return;
    }

    const message = `
ü§ñ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>

Telegram notifications —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!

‚è∞ ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}
`.trim();

    try {
      await this.bot.telegram.sendMessage(this.adminChatId, message, { parse_mode: 'HTML' });
      logger.info('Test Telegram message sent successfully');
    } catch (error) {
      logger.error('Failed to send test Telegram message', {
        error: error instanceof Error ? error : new Error(String(error)),
      });
      throw error;
    }
  }
}
