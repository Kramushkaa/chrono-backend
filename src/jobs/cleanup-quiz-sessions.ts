/**
 * Job –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö quiz sessions
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * 1. –í—ã–∑—ã–≤–∞—Ç—å –∏–∑ server.ts –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: await cleanupExpiredQuizSessions(pool)
 * 2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ cron (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤): cron pattern 0 star-slash-6 star star star
 * 3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å node-cron –∏–ª–∏ –¥—Ä—É–≥–∏–º scheduler
 */

import { Pool } from 'pg';

export interface CleanupResult {
  deletedCount: number;
  timestamp: Date;
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ quiz sessions
 * @param pool - PostgreSQL connection pool
 * @returns –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
 */
export async function cleanupExpiredQuizSessions(pool: Pool): Promise<CleanupResult> {
  try {
    const result = await pool.query(`
      DELETE FROM quiz_sessions 
      WHERE expires_at < NOW() 
        AND finished_at IS NULL
      RETURNING id
    `);

    const deletedCount = result.rowCount || 0;
    
    if (deletedCount > 0) {
      console.log(`üßπ [Cleanup] –£–¥–∞–ª–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö quiz sessions: ${deletedCount}`);
    }

    return {
      deletedCount,
      timestamp: new Date(),
    };
  } catch (error) {
    console.error('‚ùå [Cleanup] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ quiz sessions:', error);
    throw error;
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ quiz sessions (—Å—Ç–∞—Ä—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)
 * –≠—Ç–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞ –≤ –ë–î
 * @param pool - PostgreSQL connection pool
 * @param daysOld - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 90)
 * @returns –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
 */
export async function cleanupOldFinishedQuizSessions(
  pool: Pool,
  daysOld: number = 90
): Promise<CleanupResult> {
  try {
    const result = await pool.query(`
      DELETE FROM quiz_sessions 
      WHERE finished_at < NOW() - INTERVAL '${daysOld} days'
      RETURNING id
    `);

    const deletedCount = result.rowCount || 0;
    
    if (deletedCount > 0) {
      console.log(`üßπ [Cleanup] –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö quiz sessions: ${deletedCount}`);
    }

    return {
      deletedCount,
      timestamp: new Date(),
    };
  } catch (error) {
    console.error('‚ùå [Cleanup] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö quiz sessions:', error);
    throw error;
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É quiz sessions
 * @param pool - PostgreSQL connection pool
 * @param cleanOldFinished - –¢–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false)
 * @param daysOld - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 90)
 */
export async function runQuizSessionsCleanup(
  pool: Pool,
  cleanOldFinished: boolean = false,
  daysOld: number = 90
): Promise<{ expired: CleanupResult; oldFinished?: CleanupResult }> {
  const expired = await cleanupExpiredQuizSessions(pool);
  
  let oldFinished: CleanupResult | undefined;
  if (cleanOldFinished) {
    oldFinished = await cleanupOldFinishedQuizSessions(pool, daysOld);
  }

  return { expired, oldFinished };
}

