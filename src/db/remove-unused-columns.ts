import { Pool } from 'pg'
import dotenv from 'dotenv'
import path from 'path'

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
dotenv.config({ path: path.resolve(__dirname, '../../.env') })

async function removeUnusedColumns() {
  const pool = new Pool({
    host: process.env.DB_HOST || 'localhost',
    port: parseInt(process.env.DB_PORT || '5432'),
    database: process.env.DB_NAME || 'chrononinja',
    user: process.env.DB_USER || 'postgres',
    password: process.env.DB_PASSWORD || 'password',
    ssl: { rejectUnauthorized: false },
  })

  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫...')

    // –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    console.log('–£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã...')
    await pool.query('DROP INDEX IF EXISTS idx_achievements_submitted_at')
    await pool.query('DROP INDEX IF EXISTS idx_periods_submitted_at')

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ achievements
    console.log('–£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã achievements...')
    await pool.query('ALTER TABLE achievements DROP COLUMN IF EXISTS submitted_at')
    await pool.query('ALTER TABLE achievements DROP COLUMN IF EXISTS reviewed_at')

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ periods
    console.log('–£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã periods...')
    await pool.query('ALTER TABLE periods DROP COLUMN IF EXISTS submitted_at')
    await pool.query('ALTER TABLE periods DROP COLUMN IF EXISTS reviewed_at')

    console.log('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫:', error)
    process.exitCode = 1
  } finally {
    await pool.end()
  }
}

removeUnusedColumns()
