import { Pool, PoolConfig } from 'pg';
import dotenv from 'dotenv';

dotenv.config();

interface DatabaseConfig {
  host: string;
  port: number;
  database: string;
  user: string;
  password: string;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ª–æ–∫–∞–ª—å–Ω–∞—è)
const sourceConfig: DatabaseConfig = {
  host: 'localhost',
  port: 5432,
  database: 'chronoline_db',
  user: 'postgres',
  password: '1qwertyu'
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ü–µ–ª–µ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–µ–Ω–Ω–∞—è)
const targetConfig: DatabaseConfig = {
  host: 'chronoline-kramushka.db-msk0.amvera.tech',
  port: 5432,
  database: 'chronoline',
  user: 'Kramushka',
  password: '1qwertyu'
};

const createPool = (config: DatabaseConfig): Pool => {
  const poolConfig: PoolConfig = {
    ...config,
    max: 20,
    idleTimeoutMillis: 30000,
    connectionTimeoutMillis: 10000,
    // SSL —Ç–æ–ª—å–∫–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    ssl: config.host !== 'localhost' ? {
      rejectUnauthorized: false
    } : false
  };

  const pool = new Pool(poolConfig);

  pool.on('error', (err) => {
    console.error('Unexpected error on idle client', err);
    process.exit(-1);
  });

  return pool;
};

async function migrateData() {
  const sourcePool = createPool(sourceConfig);
  const targetPool = createPool(targetConfig);

  try {
    console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await sourcePool.query('SELECT NOW()');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    await targetPool.query('SELECT NOW()');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑—ã
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü...');
    const tablesResult = await sourcePool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
      ORDER BY table_name
    `);

    const tables = tablesResult.rows.map(row => row.table_name);
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tables.length}`);
    console.log('–¢–∞–±–ª–∏—Ü—ã:', tables);

    // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
    for (const tableName of tables) {
      console.log(`\nüîÑ –ü–µ—Ä–µ–Ω–æ—Å —Ç–∞–±–ª–∏—Ü—ã: ${tableName}`);
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        const structureResult = await sourcePool.query(`
          SELECT column_name, data_type, is_nullable, column_default
          FROM information_schema.columns 
          WHERE table_name = $1 
          AND table_schema = 'public'
          ORDER BY ordinal_position
        `, [tableName]);

        const columns = structureResult.rows;
        console.log(`   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: ${columns.length} –∫–æ–ª–æ–Ω–æ–∫`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        const dataResult = await sourcePool.query(`SELECT * FROM "${tableName}"`);
        const rows = dataResult.rows;
        console.log(`   –î–∞–Ω–Ω—ã—Ö: ${rows.length} —Å—Ç—Ä–æ–∫`);

        if (rows.length === 0) {
          console.log(`   ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ ${tableName} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }

        // –û—á–∏—â–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        try {
          await targetPool.query(`DELETE FROM "${tableName}"`);
          console.log(`   üóëÔ∏è  –û—á–∏—â–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ ${tableName}`);
        } catch (error) {
          console.log(`   ‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–∏—â–µ–Ω–∞`);
        }

        // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ü–µ–ª–µ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        if (rows.length > 0) {
          const columnNames = Object.keys(rows[0]);
          const placeholders = columnNames.map((_, index) => `$${index + 1}`).join(', ');
          const insertQuery = `INSERT INTO "${tableName}" (${columnNames.map(name => `"${name}"`).join(', ')}) VALUES (${placeholders})`;

          // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü
          const batchSize = 1000;
          for (let i = 0; i < rows.length; i += batchSize) {
            const batch = rows.slice(i, i + batchSize);
            
            for (const row of batch) {
              const values = columnNames.map(col => row[col]);
              await targetPool.query(insertQuery, values);
            }
            
            console.log(`   üì¶ –í—Å—Ç–∞–≤–ª–µ–Ω–æ ${Math.min(i + batchSize, rows.length)} –∏–∑ ${rows.length} —Å—Ç—Ä–æ–∫`);
          }
        }

        console.log(`   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞`);

             } catch (error) {
         console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, error instanceof Error ? error.message : String(error));
       }
    }

    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

     } catch (error) {
     console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error instanceof Error ? error.message : String(error));
   } finally {
    await sourcePool.end();
    await targetPool.end();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateData().catch(console.error); 