import { Pool, PoolConfig } from 'pg';
import dotenv from 'dotenv';

dotenv.config();

interface DatabaseConfig {
  host: string;
  port: number;
  database: string;
  user: string;
  password: string;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ª–æ–∫–∞–ª—å–Ω–∞—è)
const sourceConfig: DatabaseConfig = {
  host: 'localhost',
  port: 5432,
  database: 'chronoline_db',
  user: 'postgres',
  password: '1qwertyu'
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ü–µ–ª–µ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–µ–Ω–Ω–∞—è)
const targetConfig: DatabaseConfig = {
  host: 'chronoline-kramushka.db-msk0.amvera.tech',
  port: 5432,
  database: 'chronoline',
  user: 'Kramushka',
  password: '1qwertyu'
};

const createPool = (config: DatabaseConfig): Pool => {
  const poolConfig: PoolConfig = {
    ...config,
    max: 5,
    idleTimeoutMillis: 10000,
    connectionTimeoutMillis: 5000,
    ssl: {
      rejectUnauthorized: false
    }
  };

  const pool = new Pool(poolConfig);

  pool.on('error', (err) => {
    console.error('Pool error:', err);
  });

  return pool;
};

async function testConnections() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...\n');

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  console.log('üìä –ò—Å—Ö–æ–¥–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:');
  console.log(`   Host: ${sourceConfig.host}`);
  console.log(`   Port: ${sourceConfig.port}`);
  console.log(`   Database: ${sourceConfig.database}`);
  console.log(`   User: ${sourceConfig.user}`);
  
  const sourcePool = createPool(sourceConfig);
  
  try {
    const result = await sourcePool.query('SELECT NOW() as current_time, version() as version');
    console.log('   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`   –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${result.rows[0].current_time}`);
    console.log(`   –í–µ—Ä—Å–∏—è PostgreSQL: ${result.rows[0].version.split(' ')[0]}`);
  } catch (error) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error instanceof Error ? error.message : String(error));
  } finally {
    await sourcePool.end();
  }

  console.log('\nüìä –¶–µ–ª–µ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:');
  console.log(`   Host: ${targetConfig.host}`);
  console.log(`   Port: ${targetConfig.port}`);
  console.log(`   Database: ${targetConfig.database}`);
  console.log(`   User: ${targetConfig.user}`);
  
  const targetPool = createPool(targetConfig);
  
  try {
    const result = await targetPool.query('SELECT NOW() as current_time, version() as version');
    console.log('   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`   –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${result.rows[0].current_time}`);
    console.log(`   –í–µ—Ä—Å–∏—è PostgreSQL: ${result.rows[0].version.split(' ')[0]}`);
  } catch (error) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error instanceof Error ? error.message : String(error));
  } finally {
    await targetPool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testConnections().catch(console.error); 