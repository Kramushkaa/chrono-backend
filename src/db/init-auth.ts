import { Pool } from 'pg';
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env
dotenv.config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  user: process.env.DB_USER || 'postgres',
  host: process.env.DB_HOST || 'localhost',
  database: process.env.DB_NAME || 'chrononinja',
  password: process.env.DB_PASSWORD || 'password',
  port: parseInt(process.env.DB_PORT || '5432'),
  ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : undefined as any,
});

async function initAuthTables() {
  try {
    console.log('üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª—ã
    const authSqlPath = path.join(__dirname, 'auth-init.sql');
    const authSqlContent = fs.readFileSync(authSqlPath, 'utf8');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å—ã (auth)
    await pool.query(authSqlContent);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ñ–∞–π–ª–∞)
    try {
      const achievementsSqlPath = path.join(__dirname, 'achievements-init.sql');
      if (fs.existsSync(achievementsSqlPath)) {
        const achievementsSqlContent = fs.readFileSync(achievementsSqlPath, 'utf8');
        await pool.query(achievementsSqlContent);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ achievements —Å–æ–∑–¥–∞–Ω–∞/–∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      }
    } catch (e) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É achievements:', e);
    }
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('üìã –°–æ–∑–¥–∞–Ω—ã —Ç–∞–±–ª–∏—Ü—ã:');
    console.log('   - users (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)');
    console.log('   - user_sessions (—Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)');
    console.log('   - roles (—Ä–æ–ª–∏)');
    console.log('   - permissions (—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è)');
    console.log('   - role_permissions (—Å–≤—è–∑–∏ —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π)');
    console.log('');
    console.log('üë§ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:');
  console.log('   Email: admin@chrono.ninja');
    console.log('   –ü–∞—Ä–æ–ª—å: admin123');
    console.log('   –†–æ–ª—å: admin');
    console.log('');
    console.log('‚ö†Ô∏è  –í–ê–ñ–ù–û: –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    throw error;
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initAuthTables().catch(console.error); 