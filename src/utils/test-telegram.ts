import dotenv from 'dotenv';
import { TelegramService } from '../services/telegramService';
import { config } from '../config';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function testTelegramNotifications() {
  console.log('ü§ñ Testing Telegram notifications...\n');

  const telegramService = new TelegramService(
    config.telegram.botToken,
    config.telegram.adminChatId
  );

  try {
    // –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    console.log('üì® Test 1: Sending test message...');
    await telegramService.sendTestMessage();
    console.log('‚úÖ Test message sent successfully!\n');

    await new Promise(resolve => setTimeout(resolve, 1000));

    // –¢–µ—Å—Ç 2: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    console.log('üì® Test 2: Testing registration notification...');
    await telegramService.notifyNewRegistration(
      'test@example.com',
      'testuser',
      'Test User'
    );
    console.log('‚úÖ Registration notification sent!\n');

    await new Promise(resolve => setTimeout(resolve, 1000));

    // –¢–µ—Å—Ç 3: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    console.log('üì® Test 3: Testing verification email notification...');
    await telegramService.notifyVerificationEmailSent('test@example.com', false);
    console.log('‚úÖ Verification email notification sent!\n');

    await new Promise(resolve => setTimeout(resolve, 1000));

    // –¢–µ—Å—Ç 4: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ email
    console.log('üì® Test 4: Testing email verified notification...');
    await telegramService.notifyEmailVerified('test@example.com', 'testuser');
    console.log('‚úÖ Email verified notification sent!\n');

    await new Promise(resolve => setTimeout(resolve, 1000));

    // –¢–µ—Å—Ç 5: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    console.log('üì® Test 5: Testing resend verification notification...');
    await telegramService.notifyVerificationEmailSent('test@example.com', true);
    console.log('‚úÖ Resend verification notification sent!\n');

    await new Promise(resolve => setTimeout(resolve, 1000));

    // –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ (pending)
    console.log('üì® Test 6: Testing person created notification (pending)...');
    await telegramService.notifyPersonCreated('–¢–µ—Å—Ç–æ–≤–∞—è –õ–∏—á–Ω–æ—Å—Ç—å', 'user@test.com', 'pending', 'test-person-id');
    console.log('‚úÖ Person created notification sent!\n');

    await new Promise(resolve => setTimeout(resolve, 1000));

    // –¢–µ—Å—Ç 7: –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º (approved)
    console.log('üì® Test 7: Testing person created notification (approved)...');
    await telegramService.notifyPersonCreated('–î—Ä—É–≥–∞—è –õ–∏—á–Ω–æ—Å—Ç—å', 'moderator@test.com', 'approved', 'test-person-2');
    console.log('‚úÖ Person approved notification sent!\n');

    await new Promise(resolve => setTimeout(resolve, 1000));

    // –¢–µ—Å—Ç 8: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–∏—á–Ω–æ—Å—Ç–∏
    console.log('üì® Test 8: Testing person edit proposed notification...');
    await telegramService.notifyPersonEditProposed('–ò–∑–≤–µ—Å—Ç–Ω–∞—è –õ–∏—á–Ω–æ—Å—Ç—å', 'editor@test.com', 'existing-person-id');
    console.log('‚úÖ Person edit proposed notification sent!\n');

    await new Promise(resolve => setTimeout(resolve, 1000));

    // –¢–µ—Å—Ç 9: –ü—Ä–∏–Ω—è—Ç–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
    console.log('üì® Test 9: Testing person approved notification...');
    await telegramService.notifyPersonReviewed('–¢–µ—Å—Ç–æ–≤–∞—è –õ–∏—á–Ω–æ—Å—Ç—å', 'approve', 'moderator@test.com', 'test-person-id');
    console.log('‚úÖ Person approved notification sent!\n');

    await new Promise(resolve => setTimeout(resolve, 1000));

    // –¢–µ—Å—Ç 10: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
    console.log('üì® Test 10: Testing person rejected notification...');
    await telegramService.notifyPersonReviewed('–ü–ª–æ—Ö–∞—è –õ–∏—á–Ω–æ—Å—Ç—å', 'reject', 'moderator@test.com', 'bad-person-id');
    console.log('‚úÖ Person rejected notification sent!\n');

    await new Promise(resolve => setTimeout(resolve, 1000));

    // –¢–µ—Å—Ç 11: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    console.log('üì® Test 11: Testing achievement created notification...');
    await telegramService.notifyAchievementCreated('–ò–∑–æ–±—Ä–µ–ª —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', 1879, 'user@test.com', 'pending', '–¢–æ–º–∞—Å –≠–¥–∏—Å–æ–Ω');
    console.log('‚úÖ Achievement created notification sent!\n');

    await new Promise(resolve => setTimeout(resolve, 1000));

    // –¢–µ—Å—Ç 12: –ü—Ä–∏–Ω—è—Ç–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
    console.log('üì® Test 12: Testing achievement approved notification...');
    await telegramService.notifyAchievementReviewed('–û—Ç–∫—Ä—ã–ª –ê–º–µ—Ä–∏–∫—É', 1492, 'approve', 'moderator@test.com');
    console.log('‚úÖ Achievement approved notification sent!\n');

    await new Promise(resolve => setTimeout(resolve, 1000));

    // –¢–µ—Å—Ç 13: –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
    console.log('üì® Test 13: Testing period created notification...');
    await telegramService.notifyPeriodCreated('ruler', 1533, 1584, 'user@test.com', 'pending', '–ò–≤–∞–Ω –ì—Ä–æ–∑–Ω—ã–π');
    console.log('‚úÖ Period created notification sent!\n');

    console.log('üéâ All tests completed successfully!');
    console.log(`\nüì± Check your Telegram chat (ID: ${config.telegram.adminChatId}) for 13 notifications.`);
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Test failed:', error);
    process.exit(1);
  }
}

testTelegramNotifications();

