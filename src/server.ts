import express from 'express';
import cors from 'cors';
import { Pool } from 'pg';
import { AuthService } from './services/authService';
import { AuthController } from './controllers/authController';
import { createAuthRoutes } from './routes/authRoutes';
import { logRequest, errorHandler } from './middleware/auth';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const isLocal = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV;

const pool = new Pool({
  host: process.env.DB_HOST || (isLocal ? 'chronoline-kramushka.db-msk0.amvera.tech' : 'amvera-kramushka-cnpg-chronoline-rw'),
  port: parseInt(process.env.DB_PORT || '5432'),
  database: process.env.DB_NAME || 'chronoline',
  user: process.env.DB_USER || 'Kramushka',
  password: process.env.DB_PASSWORD || '1qwertyu',
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 10000,
  ssl: {
    rejectUnauthorized: false
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
const authService = new AuthService(pool);
const authController = new AuthController(authService);

// –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));
app.use(cors({
  origin: process.env.CORS_ORIGIN || '*',
  credentials: true
}));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(logRequest);

// –ú–∞—Ä—à—Ä—É—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.use('/api/auth', createAuthRoutes(authController));

// –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.json({
    message: '–•—Ä–æ–Ω–æ –Ω–∏–Ω–¥–∑—è API',
    version: '1.0.0',
    endpoints: {
      persons: '/api/persons',
      categories: '/api/categories',
      countries: '/api/countries',
      stats: '/api/stats',
      health: '/api/health',
      auth: '/api/auth'
    }
  });
});

// –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã API
app.get('/api/health', (req, res) => {
  res.json({
    success: true,
    message: '–•—Ä–æ–Ω–æ –Ω–∏–Ω–¥–∑—è API —Ä–∞–±–æ—Ç–∞–µ—Ç',
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª–∏—á–Ω–æ—Å—Ç—è—Ö —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
app.get('/api/persons', async (req, res) => {
  try {
    const { category, country, startYear, endYear } = req.query;
    
    let query = 'SELECT * FROM persons WHERE 1=1';
    const params: any[] = [];
    let paramIndex = 1;
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if (category) {
      const categoryArray = Array.isArray(category) 
        ? category 
        : category.toString().split(',');
      query += ` AND category = ANY($${paramIndex}::text[])`;
      params.push(categoryArray);
      paramIndex++;
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    if (country) {
      const countryArray = Array.isArray(country) 
        ? country 
        : country.toString().split(',').map(c => c.trim());
      query += ` AND EXISTS ( 
        SELECT 1 FROM unnest(string_to_array(country, '/')) AS c
        WHERE trim(c) = ANY($${paramIndex}::text[])
      )`;
      params.push(countryArray);
      paramIndex++;
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ–¥–∞–º
    if (startYear) {
      query += ` AND death_year >= $${paramIndex}`;
      params.push(parseInt(startYear.toString()));
      paramIndex++;
    }
    
    if (endYear) {
      query += ` AND birth_year <= $${paramIndex}`;
      params.push(parseInt(endYear.toString()));
      paramIndex++;
    }
    
    query += ' ORDER BY birth_year ASC';
    
    const result = await pool.query(query, params);
    
    const persons = result.rows.map(row => ({
      id: row.id,
      name: row.name,
      birthYear: row.birth_year,
      deathYear: row.death_year,
      reignStart: row.reign_start,
      reignEnd: row.reign_end,
      category: row.category,
      country: row.country,
      description: row.description,
      achievements: row.achievements,
      achievementYear1: row.achievement_year_1,
      achievementYear2: row.achievement_year_2,
      achievementYear3: row.achievement_year_3,
      imageUrl: row.image_url
    }));
    
    res.json(persons);
  } catch (error) {
    console.error('Error fetching persons:', error);
    res.status(500).json({
      success: false,
      error: 'Database error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö'
    });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏
app.get('/api/persons/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    if (!id) {
      res.status(400).json({
        error: 'ID –Ω–µ —É–∫–∞–∑–∞–Ω'
      });
      return;
    }
    
    const query = 'SELECT * FROM persons WHERE id = $1';
    
    const result = await pool.query(query, [id]);
    
    if (result.rows.length === 0) {
      res.status(404).json({
        success: false,
        error: 'Person not found',
        message: '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
      return;
    }
    
    const row = result.rows[0];
    const person = {
      id: row.id,
      name: row.name,
      birthYear: row.birth_year,
      deathYear: row.death_year,
      reignStart: row.reign_start || null,
      reignEnd: row.reign_end || null,
      category: row.category,
      country: row.country,
      description: row.description,
      achievements: row.achievements,
      achievementYear1: row.achievement_year_1,
      achievementYear2: row.achievement_year_2,
      achievementYear3: row.achievement_year_3,
      imageUrl: row.image_url
    };
    
    res.json(person);
  } catch (error) {
    console.error('Error fetching person:', error);
    res.status(500).json({
      success: false,
      error: 'Database error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö'
    });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
app.get('/api/categories', async (req, res) => {
  try {
    // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É unique_categories, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    let query = 'SELECT category FROM unique_categories';
    let result = await pool.query(query);
    
    // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º DISTINCT
    if (result.rows.length === 0) {
      query = `
        SELECT DISTINCT category 
        FROM persons 
        WHERE category IS NOT NULL 
        ORDER BY category
      `;
      result = await pool.query(query);
    }
    
    const categories = result.rows.map(row => row.category);
    res.json(categories);
  } catch (error) {
    console.error('Error fetching categories:', error);
    res.status(500).json({
      success: false,
      error: 'Database error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π'
    });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω
app.get('/api/countries', async (req, res) => {
  try {
    // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É unique_countries, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    let query = 'SELECT country FROM unique_countries';
    let result = await pool.query(query);
    
    // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º DISTINCT
    if (result.rows.length === 0) {
      query = `
        SELECT DISTINCT country 
        FROM persons 
        WHERE country IS NOT NULL 
        ORDER BY country
      `;
      result = await pool.query(query);
    }
    
    const countries = result.rows.map(row => row.country);
    res.json(countries);
  } catch (error) {
    console.error('Error fetching countries:', error);
    res.status(500).json({
      success: false,
      error: 'Database error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω'
    });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/stats', async (req, res) => {
  try {
    const statsResult = await pool.query(`
      SELECT 
        COUNT(*) as total_persons,
        MIN(birth_year) as earliest_birth,
        MAX(death_year) as latest_death,
        COUNT(DISTINCT category) as unique_categories,
        COUNT(DISTINCT country) as unique_countries
      FROM persons
    `);
    
    const categoryStatsResult = await pool.query(`
      SELECT category, COUNT(*) as count
      FROM persons
      GROUP BY category
      ORDER BY count DESC
    `);
    
    const countryStatsResult = await pool.query(`
      SELECT country, COUNT(*) as count
      FROM persons
      GROUP BY country
      ORDER BY count DESC
    `);
    
    const stats = {
      overview: statsResult.rows[0],
      categories: categoryStatsResult.rows,
      countries: countryStatsResult.rows
    };
    
    res.json(stats);
  } catch (error) {
    console.error('Error fetching stats:', error);
    res.status(500).json({
      success: false,
      error: 'Database error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use(errorHandler);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    error: 'Not found',
    message: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
  });
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    client.release();
    
    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.listen(PORT, () => {
      console.log(`üöÄ –•—Ä–æ–Ω–æ –Ω–∏–Ω–¥–∑—è API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üìä API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
      console.log(`üìä Health check: http://localhost:${PORT}/api/health`);
      console.log(`üîê Auth API: http://localhost:${PORT}/api/auth`);
      console.log(`üë• Persons API: http://localhost:${PORT}/api/persons`);
      console.log(`üìà Stats API: http://localhost:${PORT}/api/stats`);
      
      // –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ CORS
      const isLocal = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV;
      const corsInfo = isLocal ? 'http://localhost:3000' : '–≤—Å–µ –¥–æ–º–µ–Ω—ã (*)';
      console.log(`üîó CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è: ${corsInfo}`);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.on('SIGINT', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã');
  await pool.end();
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã');
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã');
  await pool.end();
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã');
  process.exit(0);
});

export default app; 