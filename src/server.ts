import express from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import helmet from 'helmet';
import { AuthService } from './services/authService';
import { TelegramService } from './services/telegramService';
import { QuizService } from './services/quizService';
import { AuthController } from './controllers/authController';
import { createAuthRoutes } from './routes/authRoutes';
import { logRequest, errorHandler } from './middleware/auth';
import { asyncHandler } from './utils/errors';
import { createPool } from './db/pool';
import { createPersonRoutes } from './routes/persons';
import { createListsRoutes } from './routes/listsRoutes';
import { createAchievementsRoutes } from './routes/achievementsRoutes';
import { createPeriodsRoutes } from './routes/periodsRoutes';
import { createMetaRoutes } from './routes/metaRoutes';
import { createQuizRoutes } from './routes/quizRoutes';
import { config } from './config';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const pool = createPool();

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
const authService = new AuthService(pool);
const telegramService = new TelegramService(config.telegram.botToken, config.telegram.adminChatId);
const quizService = new QuizService(pool);
const authController = new AuthController(authService, telegramService);

// –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
const PORT = process.env.PORT || 3001;

// –î–æ–≤–µ—Ä—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ req.ip –∑–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–æ–º
app.set('trust proxy', 1);

// Middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Security headers
app.use(helmet());

// CORS: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–º–µ–Ω–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –∏ —à–∞–±–ª–æ–Ω–æ–≤ –≤–∏–¥–∞ *.chrono.ninja, .chrono.ninja –∏–ª–∏ –≥–æ–ª—ã—Ö –¥–æ–º–µ–Ω–æ–≤
const rawOrigins = process.env.CORS || process.env.CORS_ORIGIN || process.env.CORS_ORIGINS || '*';
const allowedOriginPatterns = rawOrigins
  .split(',')
  .map(o => o.trim())
  .filter(Boolean);
const isProd = process.env.NODE_ENV === 'production';

if (isProd && allowedOriginPatterns.includes('*')) {
  console.error('‚ùå –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ CORS_ORIGINS –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å "*". –£–∫–∞–∂–∏—Ç–µ —è–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.');
  process.exit(1);
}

function isOriginAllowed(origin: string, patterns: string[]): boolean {
  try {
    const url = new URL(origin);
    const host = url.hostname.toLowerCase();

    for (const pat of patterns) {
      if (pat === '*') return true;
      if (pat.startsWith('http://') || pat.startsWith('https://')) {
        if (origin === pat) return true;
        continue;
      }
      // –ì–æ–ª–æ–¥–æ–º–µ–Ω –∏–ª–∏ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π *.domain –∏–ª–∏ .domain
      const p = pat.toLowerCase();
      if (p.startsWith('*.')) {
        const base = p.slice(2);
        if (host === base || host.endsWith(`.${base}`)) return true;
      } else if (p.startsWith('.')) {
        const base = p.slice(1);
        if (host === base || host.endsWith(`.${base}`)) return true;
      } else {
        if (host === p || host.endsWith(`.${p}`)) return true; // —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏ –ø–æ–¥–¥–æ–º–µ–Ω—ã –¥–ª—è –≥–æ–ª–æ–¥–æ–º–µ–Ω–∞
      }
    }
  } catch {}
  return false;
}

app.use(
  cors({
    origin: (origin, callback) => {
      if (!origin) return callback(null, true);
      if (isOriginAllowed(origin, allowedOriginPatterns)) return callback(null, true);
      return callback(new Error(`CORS: Origin ${origin} is not allowed`));
    },
    credentials: true,
  })
);

// –ú–∞—Ä—à—Ä—É—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.use('/api/auth', createAuthRoutes(authController));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, —á—Ç–æ–±—ã req.user –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω)
app.use(logRequest);

// –ú–∞—Ä—à—Ä—É—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –õ–∏—á–Ω–æ—Å—Ç—è–º–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ/–º–æ–¥–µ—Ä–∞—Ü–∏—è)
app.use('/api', createPersonRoutes(pool, telegramService));

// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
app.use('/api', createAchievementsRoutes(pool, telegramService));

// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤ –∂–∏–∑–Ω–∏
app.use('/api', createPeriodsRoutes(pool, telegramService));

// –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã API
app.use('/api', createMetaRoutes(pool));

// Lists routes
app.use('/api', createListsRoutes(pool));

// Quiz routes
app.use('/api', createQuizRoutes(pool));

// Backend info endpoint (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç)
app.get(
  '/api/backend-info',
  asyncHandler(async (_req: any, res: any) => {
    res.json({
      success: true,
      data: {
        name: '–•—Ä–æ–Ω–æ–Ω–∏–Ω–¥–∑—è API',
        version: '1.0.0',
        environment: process.env.NODE_ENV || 'development',
        timestamp: new Date().toISOString(),
        endpoints: {
          auth: '/api/auth',
          persons: '/api/persons',
          achievements: '/api/achievements',
          periods: '/api/periods',
          lists: '/api/lists',
          quiz: '/api/quiz',
          stats: '/api/stats',
          health: '/api/health',
          categories: '/api/categories',
          countries: '/api/countries',
        },
      },
    });
  })
);

// Backend switch endpoint (–¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É backend'–∞–º–∏)
app.post(
  '/api/backend-switch',
  asyncHandler(async (req: any, res: any) => {
    const { backendUrl } = req.body;

    if (!backendUrl || typeof backendUrl !== 'string') {
      return res.status(400).json({
        success: false,
        error: 'Invalid backend URL',
        message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å URL backend'–∞",
      });
    }

    try {
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º URL
      new URL(backendUrl);

      res.json({
        success: true,
        data: {
          message: 'Backend URL updated',
          backendUrl,
          timestamp: new Date().toISOString(),
        },
      });
    } catch (error) {
      res.status(400).json({
        success: false,
        error: 'Invalid URL format',
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL',
      });
    }
  })
);

// –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.json({
    message: '–•—Ä–æ–Ω–æ–Ω–∏–Ω–¥–∑—è API',
    version: '1.0.0',
    endpoints: {
      persons: '/api/persons',
      categories: '/api/categories',
      countries: '/api/countries',
      stats: '/api/stats',
      health: '/api/health',
      auth: '/api/auth',
      quiz: '/api/quiz',
    },
  });
});

// Removed unused endpoint /api/mine/counts (no longer referenced by frontend)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use(errorHandler);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 (Express 5: –±–µ–∑ —à–∞–±–ª–æ–Ω–∞ –ø—É—Ç–∏)
app.use((req, res) => {
  res.status(404).json({
    success: false,
    error: 'Not found',
    message: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
  });
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    client.release();

    // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∫–≤–∏–∑–æ–≤
    try {
      const cleanedCount = await quizService.cleanupExpiredSessions();
      if (cleanedCount > 0) {
        console.log(`üßπ –û—á–∏—â–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö quiz —Å–µ—Å—Å–∏–π: ${cleanedCount}`);
      }
    } catch (error) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ quiz —Å–µ—Å—Å–∏–π:', error);
    }

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.listen(PORT, () => {
      console.log(`üöÄ –•—Ä–æ–Ω–æ–Ω–∏–Ω–¥–∑—è API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üìä API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
      console.log(`üìä Health check: http://localhost:${PORT}/api/health`);
      console.log(`üîê Auth API: http://localhost:${PORT}/api/auth`);
      console.log(`üë• Persons API: http://localhost:${PORT}/api/persons`);
      console.log(`üìà Stats API: http://localhost:${PORT}/api/stats`);

      // –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ CORS
      const isLocal = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV;
      const corsInfo = isLocal ? 'http://localhost:3000' : '–≤—Å–µ –¥–æ–º–µ–Ω—ã (*)';
      console.log(`üîó CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è: ${corsInfo}`);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.on('SIGINT', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã');
  await pool.end();
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã');
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã');
  await pool.end();
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã');
  process.exit(0);
});

export default app;
